install.packages("Rcpp")
system.file("include", package = "Rcpp")
install.packages("devtools")
devtools::load_all(".")
devtools::clean_dll()
devtools::load_all()
devtools::load_all(".")
devtools::clean_dll()
devtools::load_all(".")
devtools::clean_dll()
devtools::load_all(".")
devtools::clean_dll()
devtools::load_all(".")
devtools::clean_dll()
devtools::load_all(".")
devtools::clean_dll()
devtools::load_all(".")
devtools::clean_dll()
devtools::load_all(".")
devtools::clean_dll()
devtools::load_all(".")
devtools::clean_dll()
devtools::load_all(".")
renv::init(bare = TRUE)
install.packages("renv")
renv::init(bare = TRUE)
renv::install(c("devtools", "roxygen2", "testthat"))
renv::settings$ignored.packages(c("devtools", "roxygen2", "testthat"))
renv::install("dplyr")
renv::install("plotly")
renv::install(c("heatmaply", "iheatmapr", "viridis"))
renv::install(c("igraph", "networkD3"))
renv::settings$ignored.packages(c("devtools", "roxygen2", "testthat"))
renv::snapshot()
devtools::load_all(".")
renv::install("tidyverse")
renv::snapshot()
devtools::load_all(".")
devtools::document()
pkgload::dev_help('RichCluster')
pkgload::dev_help('RichCluster')
load_cluster_data <- function(from_scratch=FALSE)
{
if (from_scratch == FALSE)  {
# load the cluster data from the files
cluster_result <- readRDS('inst/extdata/cluster_result.rds')
}
else {
# read and manually cluster
rr1 <- read.delim(system.file("extdata", "go1.txt", package="RichCluster"))
rr2 <- read.delim(system.file("extdata", "go2.txt", package="RichCluster"))
enrichment_results <- list(rr1, rr2)
rr_names <- c('7mo_DEG', '7mo_DMR')
cluster_result <- RichCluster::cluster(
enrichment_results, df_names=rr_names, min_terms=5,
distance_metric="kappa", distance_cutoff=0.5,
merge_strategy="DAVID", membership_cutoff=0.5
)
saveRDS(cluster_result, file = "inst/extdata/cluster_result.rds")
}
return(cluster_result)
}
# example of what workflow using the functions looks like
test_workflow <- function(cluster_result, min_terms=5) {
# Testing: Choose one to comment out and test
# result <- RichCluster::all_clusters_hmap(full_clusterdf, "Padj")
# result <- RichCluster::cluster_correlation_hmap(final_clusters, distance_matrix, 3)
result <- RichCluster::cluster_network(final_clusters, distance_matrix, 1)
# result <- RichCluster::full_network(distance_matrix[1:30, 1:30])
return(result)
}
cluster_result <- load_cluster_data(from_scratch=FALSE)
# ALL VISUALIZATION TESTS
# ---
c_hmap <- RichCluster::cluster_hmap(cluster_result)
c_hmap
cluster_result <- load_cluster_data(from_scratch=TRUE)
devtools::load_all(".")
cluster_result <- load_cluster_data(from_scratch=TRUE)
# ALL VISUALIZATION TESTS
# ---
c_hmap <- RichCluster::cluster_hmap(cluster_result)
load_cluster_data <- function(from_scratch=FALSE)
{
if (from_scratch == FALSE)  {
# load the cluster data from the files
cluster_result <- readRDS('inst/extdata/cluster_result.rds')
}
else {
# read and manually cluster
rr1 <- read.delim(system.file("extdata", "go1.txt", package="RichCluster"))
rr2 <- read.delim(system.file("extdata", "go2.txt", package="RichCluster"))
enrichment_results <- list(rr1, rr2)
rr_names <- c('7mo_DEG', '7mo_DMR')
cluster_result <- RichCluster::cluster(
enrichment_results, df_names=rr_names, min_terms=5,
distance_metric="kappa", distance_cutoff=0.5,
merge_strategy="DAVID", membership_cutoff=0.5
)
saveRDS(cluster_result, file = "inst/extdata/cluster_result.rds")
}
return(cluster_result)
}
# example of what workflow using the functions looks like
test_workflow <- function(cluster_result, min_terms=5) {
# Testing: Choose one to comment out and test
# result <- RichCluster::all_clusters_hmap(full_clusterdf, "Padj")
# result <- RichCluster::cluster_correlation_hmap(final_clusters, distance_matrix, 3)
result <- RichCluster::cluster_network(final_clusters, distance_matrix, 1)
# result <- RichCluster::full_network(distance_matrix[1:30, 1:30])
return(result)
}
cluster_result <- load_cluster_data(from_scratch=TRUE)
# ALL VISUALIZATION TESTS
# ---
c_hmap <- RichCluster::cluster_hmap(cluster_result)
rlang::last_trace()
devtools::clean_dll()
devtools::load_all()
load_cluster_data <- function(from_scratch=FALSE)
{
if (from_scratch == FALSE)  {
# load the cluster data from the files
cluster_result <- readRDS('inst/extdata/cluster_result.rds')
}
else {
# read and manually cluster
rr1 <- read.delim(system.file("extdata", "go1.txt", package="RichCluster"))
rr2 <- read.delim(system.file("extdata", "go2.txt", package="RichCluster"))
enrichment_results <- list(rr1, rr2)
rr_names <- c('7mo_DEG', '7mo_DMR')
cluster_result <- RichCluster::cluster(
enrichment_results, df_names=rr_names, min_terms=5,
distance_metric="kappa", distance_cutoff=0.5,
merge_strategy="DAVID", membership_cutoff=0.5
)
saveRDS(cluster_result, file = "inst/extdata/cluster_result.rds")
}
return(cluster_result)
}
# example of what workflow using the functions looks like
test_workflow <- function(cluster_result, min_terms=5) {
# Testing: Choose one to comment out and test
# result <- RichCluster::all_clusters_hmap(full_clusterdf, "Padj")
# result <- RichCluster::cluster_correlation_hmap(final_clusters, distance_matrix, 3)
result <- RichCluster::cluster_network(final_clusters, distance_matrix, 1)
# result <- RichCluster::full_network(distance_matrix[1:30, 1:30])
return(result)
}
cluster_result <- load_cluster_data(from_scratch=TRUE)
# ALL VISUALIZATION TESTS
# ---
c_hmap <- RichCluster::cluster_hmap(cluster_result)
devtools::clean_dll()
devtools::load_all()
load_cluster_data <- function(from_scratch=FALSE)
{
if (from_scratch == FALSE)  {
# load the cluster data from the files
cluster_result <- readRDS('inst/extdata/cluster_result.rds')
}
else {
# read and manually cluster
rr1 <- read.delim(system.file("extdata", "go1.txt", package="RichCluster"))
rr2 <- read.delim(system.file("extdata", "go2.txt", package="RichCluster"))
enrichment_results <- list(rr1, rr2)
rr_names <- c('7mo_DEG', '7mo_DMR')
cluster_result <- RichCluster::cluster(
enrichment_results, df_names=rr_names, min_terms=5,
distance_metric="kappa", distance_cutoff=0.5,
merge_strategy="DAVID", membership_cutoff=0.5
)
saveRDS(cluster_result, file = "inst/extdata/cluster_result.rds")
}
return(cluster_result)
}
# example of what workflow using the functions looks like
test_workflow <- function(cluster_result, min_terms=5) {
# Testing: Choose one to comment out and test
# result <- RichCluster::all_clusters_hmap(full_clusterdf, "Padj")
# result <- RichCluster::cluster_correlation_hmap(final_clusters, distance_matrix, 3)
result <- RichCluster::cluster_network(final_clusters, distance_matrix, 1)
# result <- RichCluster::full_network(distance_matrix[1:30, 1:30])
return(result)
}
cluster_result <- load_cluster_data(from_scratch=TRUE)
View(cluster_result$all_clusters)
devtools::load_all(".")
load_cluster_data <- function(from_scratch=FALSE)
{
if (from_scratch == FALSE)  {
# load the cluster data from the files
cluster_result <- readRDS('inst/extdata/cluster_result.rds')
}
else {
# read and manually cluster
rr1 <- read.delim(system.file("extdata", "go1.txt", package="RichCluster"))
rr2 <- read.delim(system.file("extdata", "go2.txt", package="RichCluster"))
enrichment_results <- list(rr1, rr2)
rr_names <- c('7mo_DEG', '7mo_DMR')
cluster_result <- RichCluster::cluster(
enrichment_results, df_names=rr_names, min_terms=5,
distance_metric="kappa", distance_cutoff=0.5,
merge_strategy="average", membership_cutoff=0.5
)
saveRDS(cluster_result, file = "inst/extdata/cluster_result.rds")
}
return(cluster_result)
}
cluster_result <- load_cluster_data(from_scratch=TRUE)
cluster_result <- load_cluster_data(from_scratch=TRUE)
devtools::load_all(".")
load_cluster_data <- function(from_scratch=FALSE)
{
if (from_scratch == FALSE)  {
# load the cluster data from the files
cluster_result <- readRDS('inst/extdata/cluster_result.rds')
}
else {
# read and manually cluster
rr1 <- read.delim(system.file("extdata", "go1.txt", package="RichCluster"))
rr2 <- read.delim(system.file("extdata", "go2.txt", package="RichCluster"))
enrichment_results <- list(rr1, rr2)
rr_names <- c('7mo_DEG', '7mo_DMR')
cluster_result <- RichCluster::cluster(
enrichment_results, df_names=rr_names, min_terms=5,
distance_metric="kappa", distance_cutoff=0.5,
merge_strategy="average", membership_cutoff=0.5
)
saveRDS(cluster_result, file = "inst/extdata/cluster_result.rds")
}
return(cluster_result)
}
cluster_result <- load_cluster_data(from_scratch=TRUE)
load_cluster_data <- function(from_scratch=FALSE)
{
if (from_scratch == FALSE)  {
# load the cluster data from the files
cluster_result <- readRDS('inst/extdata/cluster_result.rds')
}
else {
# read and manually cluster
rr1 <- read.delim(system.file("extdata", "go1.txt", package="RichCluster"))
rr2 <- read.delim(system.file("extdata", "go2.txt", package="RichCluster"))
enrichment_results <- list(rr1, rr2)
rr_names <- c('7mo_DEG', '7mo_DMR')
cluster_result <- RichCluster::cluster(
enrichment_results, df_names=rr_names, min_terms=5,
distance_metric="kappa", distance_cutoff=0.5,
linkage_method="average", linkage_cutoff=0.5
)
saveRDS(cluster_result, file = "inst/extdata/cluster_result.rds")
}
return(cluster_result)
}
cluster_result <- load_cluster_data(from_scratch=TRUE)
devtools::load_all(".")
cluster_result <- load_cluster_data(from_scratch=TRUE)
devtools::load_all(".")
devtools::load_all(".")
cluster_result <- load_cluster_data(from_scratch=TRUE)
devtools::load_all(".")
cluster_result <- load_cluster_data(from_scratch=TRUE)
devtools::load_all(".")
cluster_result <- load_cluster_data(from_scratch=TRUE)
devtools::load_all(".")
cluster_result <- load_cluster_data(from_scratch=TRUE)
devtools::load_all(".")
cluster_result <- load_cluster_data(from_scratch=TRUE)
devtools::load_all(".")
cluster_result <- load_cluster_data(from_scratch=TRUE)
# ALL VISUALIZATION TESTS
# ---
c_hmap <- RichCluster::cluster_hmap(cluster_result)
c_hmap
c_hmap
View(cluster_result)
cluster_result[["all_clusters"]]
View(cluster_result[["all_clusters"]])
devtools::load_all(".")
cluster_result <- load_cluster_data(from_scratch=TRUE)
View(cluster_result[["all_clusters"]])
devtools::load_all(".")
cluster_result <- load_cluster_data(from_scratch=TRUE)
View(cluster_result[["all_clusters"]])
?RichCluster::cluster_hmap
View(cluster_result[["final_clusters"]])
# ALL VISUALIZATION TESTS
# ---
c_hmap <- RichCluster::cluster_hmap(cluster_result)
c_hmap
